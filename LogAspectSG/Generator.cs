using LogAspectSG.Analyzer;
using LogAspectSG.Diagnostics;
using LogAspectSG.Engine;
using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;

[assembly: InternalsVisibleTo("LogAspectSGTest")]
namespace LogAspectSG
{
    [Generator]
    public class Generator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            IncrementalValueProvider<ImmutableArray<MetadataReference>> md = context.MetadataReferencesProvider.Collect();

            IncrementalValuesProvider<AdditionalText> logFile = context.AdditionalTextsProvider.Where(static file => file.Path.EndsWith("LogEntries.txt"));

            IncrementalValuesProvider<string> logContent = logFile
                .Select((text, cancellationToken) => text.GetText(cancellationToken)?.ToString())
                .Where(static t => t is not null)
                .Select((s, _) => s!.ToLowerInvariant());

            IncrementalValuesProvider<InterceptorStoreBase> records = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: static (syntaxNode, _) => syntaxNode.MatchDeclaration(),
                    transform: static (context, ct) => context.GetInterceptorBaseStores(ct))
                .Where(static i => i is not null)
                .Select((t, _) => t!)
                .Combine(logContent.Collect())
                .Where(c => Collector.FilterType(c.Left, c.Right))
                .Select((p, _) => p.Left);

            IncrementalValueProvider<(Compilation, ImmutableArray<InterceptorStoreBase>)> compilationWithRecords
                = context.CompilationProvider.Combine(records.Collect());

            // Generate the source using the compilation and declarations
            context.RegisterImplementationSourceOutput(compilationWithRecords,
                static (context, compilationWithRecords) => AddInterceptors(context, compilationWithRecords));
        }

        private static void AddInterceptors(SourceProductionContext context, (Compilation compilation, ImmutableArray<InterceptorStoreBase> records) compilationWithRecords)
        {
            System.Collections.Generic.IEnumerable<InterceptorStore> interceptorStores = compilationWithRecords.records.CreateInterceptorStores(compilationWithRecords.compilation, context.CancellationToken)
                .Where(r => !r.InMethod);

            if (!interceptorStores.Any())
            {
                return;
            }

            bool error = false;

            foreach (InterceptorStore interceptorStore in interceptorStores)
            {
                IEnumerable<GeneratorDiagnostic> diagnostics = interceptorStore.Verify(compilationWithRecords.compilation);
                foreach (GeneratorDiagnostic diagnostic in diagnostics)
                {
                    if (!InterceptorStoreAnalyzer.Diagnostics.Any(d => d.Id == diagnostic.Id))
                    {
                        diagnostic.ReportDiagnostic(context.ReportDiagnostic);
                    }
                    error = true;
                }
            }

            if (error)
            {
                context.ReportDiagnostic(Diagnostic.Create(GeneratorDiagnostic.Error, Location.None, compilationWithRecords.compilation.AssemblyName));
                return;
            }

            IEnumerable<string> nameSpaces = interceptorStores
                .Select(r => r.Method.ContainingType.ContainingNamespace.Name).Distinct();

            string name = Assembly.GetExecutingAssembly().GetName().Name;
            Version version = Assembly.GetExecutingAssembly().GetName().Version;

            string generated = $@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by {name} Version: {version}
// </auto-generated>
//------------------------------------------------------------------------------

";

#if DEBUG
            bool success = true;
#endif
            string source = string.Empty;

            foreach (string? nameSpace in nameSpaces)
            {
                string usedNS = nameSpace == "<global namespace>" ? "GlobalNamespace" : nameSpace;

                try
                {
                    source = interceptorStores.DumpNamespace(usedNS);
                }
                catch (Exception ex)
                {
                    context.ReportDiagnostic(Diagnostic.Create(GeneratorDiagnostic.Internal, Location.None, ex.Message));
#if DEBUG
                    success = false;
#endif
                }

                string sourceName = $"{usedNS}.Generated.cs";

                if (source.Length != 0)
                {
                    context.AddSource(sourceName, generated + source);
                }
            }
#if DEBUG
            if (success)
            {
                context.ReportDiagnostic(Diagnostic.Create(GeneratorDiagnostic.Success, Location.None, compilationWithRecords.compilation.AssemblyName));
            }
#endif
        }
    }
}
